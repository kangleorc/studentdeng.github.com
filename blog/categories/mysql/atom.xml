<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | 不会开机的男孩]]></title>
  <link href="http://studentdeng.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://studentdeng.github.com/"/>
  <updated>2013-10-22T13:16:55+08:00</updated>
  <id>http://studentdeng.github.com/</id>
  <author>
    <name><![CDATA[studentdeng]]></name>
    <email><![CDATA[studentdeng@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql 源代码 第二天 ]]></title>
    <link href="http://studentdeng.github.com/blog/2013/03/21/mysql-source-code-2/"/>
    <updated>2013-03-21T23:48:00+08:00</updated>
    <id>http://studentdeng.github.com/blog/2013/03/21/mysql-source-code-2</id>
    <content type="html"><![CDATA[<p>昨天搭建好环境, 今天怀着无比兴奋的心情看一下, 一条简单的sql 背后有那些有趣的事情发生, 当然, 我们先从最简单的sql 开始.</p>

<pre><code>select * from example
</code></pre>

<p>当然, 对于这么庞大的项目, 我只能小小的大略一下代码结构了.</p>

<h2>SQL Interface</h2>

<p>首先启动mysqld, mysql的 server 部分</p>

<p>mysqld.cc</p>

<pre><code>int main(int argc, char **argv) 
</code></pre>

<p>传说中一切世界的源头. 在处理一些参数或是配置什么的, whatever, 先不关心这个,跳转到</p>

<pre><code>int win_main(int argc, char **argv)
</code></pre>

<p>还是一些配置, 读取my.ini, 日志, socket, 什么的. 然后创建一大堆的thread, 这里面大部分暂时没用
在很多的thread callback 函数中, 有一个必须要了解一下了它是</p>

<pre><code>handle_one_connection // sql_connect.cc
</code></pre>

<p>它是client 请求server callback的开始 然后依次调用</p>

<pre><code>my_real_read -&gt; do_command -&gt; my_net_read 
</code></pre>

<p>这里等待socket</p>

<p>client 部分</p>

<p>通过mysql 我们连接到 mysqld, 这里我们先跳过其他命令过程. 直接步入今天的主题, 我事先已经创建好一个简单的数据库, 里面2个字段, 3条数据.</p>

<pre><code>select * from example
</code></pre>

<p>回到之前的server</p>

<p>这时, mysqld 收到的socket, 在检查一些错误之后, 我们来到</p>

<pre><code>dispatch_command -&gt; mysql_parse
</code></pre>

<h2>mysql Query Parser</h2>

<p>这里我们进入了mysql Query Parser 部分, mysql 首先需要词法分析,语法分析 SQL 语句, 把我们的SQL 转变成一个个token 语法树什么的 要做一些编译器类似的前端部分, whatever, 对这部分不感兴趣, 我现在可没有扩展SQL 语句的想法.我们这条语句是select 所以, 我们最后跳到了 handle_select部分</p>

<pre><code>mysql_parse -&gt; mysql_execute_command -&gt; execute_sqlcom_select -&gt; handle_select -&gt; mysql_select
</code></pre>

<h2>Query Optimizer</h2>

<p>这里我们来到了mysql Query Optimizer 部分, 3个主要的事情</p>

<pre><code> prepare
 optimize
 exec
</code></pre>

<p>这个将是之后重点要学的, 现在先跳过啦</p>

<h2>Query Execution</h2>

<pre><code>do_select -&gt; sub_select -&gt; sub_select ....
</code></pre>

<p>这里我们看到了很多类似的函数, 从名字上来看, 基本上是处理递归的, 而且,事实上也的确是这样子的....(真是废话), mysql 这里不断地读取一行行数据,
判断是否嵌套查询等等.最后 一系列的clear unlock. free, release</p>

<pre><code>net_end_statement
</code></pre>

<p>这里将数据返回client, server 继续</p>

<pre><code>do_command -&gt; my_net_read ... 
</code></pre>

<p>最后结构图
<img src="/images/mysql_1_1.gif" alt="alt text" />
<img src="/images/mysql_1_2.gif" alt="alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调试 mysql源代码 环境搭建]]></title>
    <link href="http://studentdeng.github.com/blog/2013/03/20/mysql-source-code-setup/"/>
    <updated>2013-03-20T22:06:00+08:00</updated>
    <id>http://studentdeng.github.com/blog/2013/03/20/mysql-source-code-setup</id>
    <content type="html"><![CDATA[<p>下载源代码 <a href="http://dev.mysql.com/downloads/mysql/">mysql</a></p>

<p>下载CMAKE <a href="http://www.cmake.org/">download</a></p>

<p>代码根目录 执行下面代码, 确定生成configure.data 文件</p>

<pre><code>wscript win\configure.js WITH_INNOBASE_STORAGE_ENGINE WITH_PARTITION_STORAGE_ENGINE MYSQL_SERVER_SUFFIX=-pro
</code></pre>

<p>找到 win 目录下的 XXX.bat 文件复制到源代码根目录下, 我这里使用vs2008 ,所以复制 build-vs9.bat 到源代码根目录
在系统根目录 C:/windows 下 增加一个 my.ini 用于 mysql 配置, 我的mysql 源代码目录在 C:/mysql_code/mysql-5-1.1.68</p>

<pre><code>[mysqld]
# set basedir to your installation path
basedir=C:/mysql_code/mysql-5-1.1.68
# set datadir to the location of your data directory
datadir=C:/mysql_code/mysql-5-1.1.68/win/data
</code></pre>

<p>将sql目录下的share文件夹复制到源代码根目录下</p>

<p>修改sql_locale.cc 文件, 把文件编码改成 UTF8 with BOM, windows 你懂的</p>

<p>然后可以调试了, 不过这里我遇到一个问题, 在 sql_locale.cc 函数 test_lc_time_sz 函数, 这里DEBUG_ASSERT(0)了一下, 目前先暂时注释掉它 : (
现在可以跑</p>

<pre><code>mysqld
</code></pre>

<p>然后在</p>

<pre><code>mysql -u root -p 
</code></pre>

<p>over!</p>
]]></content>
  </entry>
  
</feed>
